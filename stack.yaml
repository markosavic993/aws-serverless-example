AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack for example serverless app"
Resources:
  ValidateUserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  ValidateUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "handleuserinsertionbucket"
        S3Key: "validate-user.zip"
      Description: "Function that validates user info provided through gateway"
      FunctionName: "ValidateUserInformationLambda"
      Handler: "validate-user.handler"
      Role: !GetAtt [ ValidateUserLambdaRole, Arn ]
      Runtime: "nodejs8.10"
      Timeout: "25"
      MemorySize: "512"
   
  SaveNewUserInfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "handleuserinsertionbucket"
        S3Key: "savenewuser.zip"
      Description: "Function that saves provided user into DynamoDB table."
      FunctionName: "SaveNewUserInfoLambda"
      Handler: "savenewuser/save-user-handler.handler"
      Role: "arn:aws:iam::675043311651:role/lambda_PutItemInDynamoDbTable"
      Runtime: "nodejs8.10"
      Timeout: "25"
      MemorySize: "512"
  
  SendFailedUserInformationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "handleuserinsertionbucket"
        S3Key: "sendfailureinfo.zip"  
      Description: "Function that publishes failed user info through SNS."
      FunctionName: "SendFailedUserInformationLambda"
      Handler: "sendfailureinfo/send-failure-info.handler"
      Role: "arn:aws:iam::675043311651:role/lambda_publishToSnsRole"
      Runtime: "nodejs8.10"
      Timeout: "25"
      MemorySize: "512"
  
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.eu-central-1.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  HandleUserFromApiStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
        - |-
          {
            "Comment": "State machine that handles creating user from api gateway input",
            "StartAt": "ValidateUserState",
            "States": {
              "ValidateUserState": {
                "Type": "Task",
                "Resource": "${validateUserLambdaArn}",
                "Next": "HandleValidationResutState",
                "ResultPath": "$"
              },
              "HandleValidationResutState": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.validationState",
                    "StringEquals": "valid",
                    "Next": "ValidUserState"
                  },
                  {
                    "Not": {
                      "Variable": "$.validationState",
                      "StringEquals": "valid"
                    },
                  "Next": "InvalidUserState"
                  }
                ]
              },
              "ValidUserState": {
                "Type": "Task",
                "Resource": "${saveUserLambdaArn}",
                "End": true
              },
              "InvalidUserState": {
                "Type": "Task",
                "Resource": "${sendFailureInfoLambdaArn}",
                "End": true
              }
            }
          }   
        - {
            validateUserLambdaArn: !GetAtt [ ValidateUserLambda, Arn ],
            saveUserLambdaArn: !GetAtt [ SaveNewUserInfoLambda, Arn ],
            sendFailureInfoLambdaArn: !GetAtt [ SendFailedUserInformationLambda, Arn ]
          }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  